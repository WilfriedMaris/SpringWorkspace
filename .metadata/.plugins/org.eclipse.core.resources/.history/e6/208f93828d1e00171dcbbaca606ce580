package be.vdab.repositories;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import be.vdab.entities.Brouwer;
import be.vdab.valueobjects.Adres;

@Repository
class InMemoryBrouwerRepository implements BrouwerRepository {
	private ConcurrentHashMap<Long, Brouwer> brouwers = new ConcurrentHashMap<>();
	private final NamedParameterJdbcTemplate namedParameterJdbcTemplate;
	private final SimpleJdbcInsert simpleJdbcInsert;
	
	//RowMapper
	private final RowMapper<Brouwer> rowMapper = (resultSet, rowNum) ->
	new Brouwer(resultSet.getLong("id"), resultSet.getString("naam"), 
			new Adres(resultSet.getString("straat"),resultSet.getString("huisnr"),
					resultSet.getInt("postcode"), resultSet.getString("gemeente")), 
			resultSet.getInt("omzet"));
	//RowMapper end
	
	//SQL statements
	private static final String SQL_FIND_ALL = "select id, naam, postcode, gemeente, omzet, straat, huisnr from brouwers ";
	//SQL statements end

	InMemoryBrouwerRepository(NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
		brouwers.put(1L, new Brouwer(1, "Wilfried Maris", 
				new Adres("Kempenlaan", "15", 3600, "Genk"), 15513));
		brouwers.put(2L, new Brouwer(2, "Dennis Teunis", 
				new Adres("Raralaan", "19", 3500, "Hasselt"), 19512));
		brouwers.put(3L, new Brouwer(3, "Linda Loiacono",
				new Adres("Stratidaloia", "30", 2200, "Italia"), 210));
		this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
		this.simpleJdbcInsert = new SimpleJdbcInsert();
	}

	@Override
	public void create(Brouwer brouwer) {
		brouwer.setId(Collections.max(brouwers.keySet()) + 1);
		brouwers.put(brouwer.getId(), brouwer);
	}

	@Override
	public List<Brouwer> findAll() {
		return namedParameterJdbcTemplate.query(SQL_FIND_ALL, rowMapper);
	}

	@Override
	public List<Brouwer> findByNaam(String beginNaam) {
		beginNaam = beginNaam.toUpperCase();
		List<Brouwer> resultaat = new ArrayList<>();
		List<Brouwer> all = namedParameterJdbcTemplate.query(SQL_FIND_ALL, rowMapper);
		for(Brouwer brouwer : all){
			if(brouwer.getNaam().toUpperCase().startsWith(beginNaam)){
				resultaat.add(brouwer);
			}
		}
		return resultaat;
	}

}
